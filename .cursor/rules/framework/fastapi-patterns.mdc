---
description: PadrÃµes especÃ­ficos para desenvolvimento FastAPI
globs: **/app.py,**/api/*.py,**/*fastapi*.py
---

# ðŸš€ PadrÃµes FastAPI

## Estrutura de Projeto
```
app.py                 # AplicaÃ§Ã£o principal
â”œâ”€â”€ models/           # Modelos Pydantic
â”œâ”€â”€ routes/           # Endpoints organizados
â”œâ”€â”€ services/         # LÃ³gica de negÃ³cio
â””â”€â”€ dependencies/     # InjeÃ§Ã£o de dependÃªncias
```

## Modelos Pydantic
```python
from pydantic import BaseModel, Field

class UserCreate(BaseModel):
    """Modelo para criaÃ§Ã£o de usuÃ¡rio"""
    name: str = Field(..., min_length=1, max_length=100)
    email: str = Field(..., regex=r'^[\w\.-]+@[\w\.-]+\.\w+$')
    age: int = Field(..., ge=0, le=150)
```

## Endpoints
- SEMPRE use Pydantic models para request/response
- SEMPRE inclua documentaÃ§Ã£o OpenAPI
- SEMPRE implemente tratamento de erros
- Use HTTPException para erros HTTP

## SeguranÃ§a
- SEMPRE valide entrada de dados
- SEMPRE use HTTPS em produÃ§Ã£o
- SEMPRE implemente rate limiting
- SEMPRE sanitize dados de entrada

## Logging
```python
import logging
logger = logging.getLogger(__name__)

@app.post("/users/")
async def create_user(user: UserCreate):
    logger.info(f"Creating user: {user.email}")
    try:
        # lÃ³gica aqui
        logger.info(f"User created: {user.email}")
    except Exception as e:
        logger.error(f"Failed to create user {user.email}: {str(e)}")
        raise
```

## ConfiguraÃ§Ãµes
- Use variÃ¡veis de ambiente para configuraÃ§Ãµes
- Configure CORS apropriadamente
- Use middleware para logging e seguranÃ§a